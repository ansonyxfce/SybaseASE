
CREATE PROCEDURE ins_TRANS_CUENTAS
    @n_cta VARCHAR(50),
    @referencia INT,
    @descrip VARCHAR(100),
    @monto NUMERIC,
    @fecha DATE
    
AS
BEGIN
    DECLARE 
    @saldo_fin NUMERIC

    IF EXISTS (SELECT C.n_cuenta, T.n_cta FROM CUENTA C, TRANS_CUENTAS T WHERE @n_cta=C.n_cuenta AND @n_cta=T.n_cta)
    BEGIN
    SELECT @saldo_fin=SUM(monto)+(@monto) FROM TRANS_CUENTAS WHERE @n_cta=n_cta
    INSERT INTO TRANS_CUENTAS VALUES (@n_cta,@referencia,@descrip,@monto,@saldo_fin,@fecha)
    END

    IF EXISTS (SELECT n_cuenta FROM CUENTA WHERE @n_cta=n_cuenta AND @n_cta NOT IN(SELECT n_cta FROM TRANS_CUENTAS WHERE @n_cta=n_cta))
    INSERT INTO TRANS_CUENTAS VALUES (@n_cta,@referencia,@descrip,@monto,@monto,@fecha)
END

go

CREATE PROCEDURE validarLOGIN
    @nick VARCHAR(15),
    @pass VARCHAR(8)

AS
BEGIN
IF NOT EXISTS (SELECT nick FROM USUARIO WHERE @nick=nick)
PRINT "EL NOMBRE DE USUARIO NO EXISTE"

IF (SELECT n_error FROM USUARIO WHERE @nick=nick) < 3
BEGIN

    IF EXISTS (SELECT * FROM USUARIO WHERE @nick=nick AND @pass=pass )
    BEGIN
    UPDATE USUARIO SET estado="CONECTADO" WHERE @nick=nick AND @pass=pass
    UPDATE USUARIO SET n_error=0 WHERE @nick=nick AND @pass=pass 
    PRINT "USTED ESTA CONECTADO."
    END
    
    ELSE 
    BEGIN
    UPDATE USUARIO SET n_error=(n_error)+1 WHERE @nick=nick
    PRINT "ERROR: LA CLAVE ES INCORRECTA."
    END

END

IF (SELECT n_error FROM USUARIO WHERE @nick=nick) >=3
BEGIN
UPDATE USUARIO SET estado="BLOQUEADO" WHERE @nick=nick
PRINT "SU USUARIO ESTA BLOQUEADO. POR FAVOR REACTIVE SU CUENTA ANTES DE INGRESAR."
END
END

go

CREATE PROCEDURE reactivarCUENTA
    @nick VARCHAR(15),
    @p1 VARCHAR(200),
    @r1 VARCHAR(50),
    @clave_especial VARCHAR(4),
    @pass_nuevo VARCHAR(8)

AS
BEGIN
IF EXISTS (SELECT nick FROM USUARIO WHERE @nick=nick AND @p1=p1 AND @r1=r1 AND @clave_especial=clave_especial AND estado="BLOQUEADO" )
BEGIN
    IF NOT EXISTS (SELECT @pass_nuevo, A.pass_viejo, B.pass FROM RESPALDO_CLAVES A, USUARIO B WHERE @nick=B.nick AND @pass_nuevo=pass_viejo)
    IF NOT EXISTS (SELECT pass FROM USUARIO WHERE @nick=nick AND pass=@pass_nuevo)
    BEGIN
    IF EXISTS (SELECT @pass_nuevo, pass FROM USUARIO WHERE @pass_nuevo LIKE '%[A-Z]%' AND @pass_nuevo LIKE '%[0-9]%' AND @pass_nuevo LIKE '%[a-z]%')
    BEGIN
    UPDATE USUARIO SET pass=@pass_nuevo WHERE @nick=nick
    UPDATE USUARIO SET estado="DESCONECTADO"
    UPDATE USUARIO SET n_error=0
    PRINT "CUENTA REACTIVADA. CLAVE CAMBIADA EXITOSAMENTE"
    END
	ELSE PRINT "ERROR: LA CLAVE DEBE POSEER MAYUSCULAS, MINUSCULAS Y NUMEROS Y DEBE SER DIFERENTE A LAS ANTERIORES"
    END
    ELSE PRINT "ERROR: LA CLAVE NUEVA DEBE SER DIFERENTE A LAS ANTERIORES"
    ELSE PRINT "ERROR: LA CLAVE NUEVA DEBE SER DIFERENTE A LAS ANTERIORES"
END

ELSE
PRINT "LA CUENTA DE USUARIO NO ESTA BLOQUEADA O LOS DATOS NO COINCIDEN."
END

go

CREATE PROCEDURE consultaCUENTAS
    @nick VARCHAR(15),
    @pass VARCHAR(8),
    @n_cta VARCHAR(50)
AS
BEGIN
    DECLARE @saldo NUMERIC

IF EXISTS (SELECT U.nick, U.pass, C.n_cuenta FROM USUARIO U, CUENTA C WHERE @nick=U.nick AND @pass=U.pass AND C.n_cuenta=@n_cta AND U.estado="CONECTADO" AND U.CI=C.CI)
    BEGIN
    SELECT @saldo=SUM(monto) FROM TRANS_CUENTAS WHERE n_cta=@n_cta
    SELECT n_cta as CUENTA, referencia as REFERENCIA, descrip as DESCRIPCION, monto as MONTO, saldo_fin as 'BALANCE', fecha as FECHA, @saldo as 'SALDO FINAL' FROM TRANS_CUENTAS WHERE @n_cta=n_cta ORDER BY FECHA DESC
    END
ELSE PRINT "USTED ESTA DESCONECTADO. POR FAVOR, CONECTESE PARA VER SUS TRANSACCIONES."
END

go

CREATE PROCEDURE consultaTARJETA
    @nick VARCHAR(15),
    @pass VARCHAR(8),
    @n_tarj VARCHAR(50)
AS
BEGIN
    DECLARE @a_pagar NUMERIC

IF EXISTS (SELECT U.nick, U.pass, T.n_tarj FROM USUARIO U, TARJETAS T WHERE @nick=U.nick AND @pass=U.pass AND T.n_tarj=@n_tarj AND U.estado="CONECTADO" AND U.CI=T.CI)
    BEGIN
    SELECT @a_pagar=SUM(monto) FROM TRANS_TARJETAS WHERE n_tarj=@n_tarj
    SELECT n_tarj as 'NÂº TARJETA', referencia as REFERENCIA, descrip as DESCRIPCION, monto as MONTO, fecha as FECHA, @a_pagar as 'PAGO TOTAL' FROM TRANS_TARJETAS WHERE @n_tarj=n_tarj
    ORDER BY FECHA DESC
    END
ELSE PRINT "USTED ESTA DESCONECTADO. POR FAVOR, CONECTESE PARA VER SUS TRANSACCIONES."
END

go


CREATE PROCEDURE validarREGISTRO
    @ced varchar(10),
    @tarj_deb varchar(50),
    @nick varchar(15),
    @pass varchar(8),
    @correo varchar(50),
    @p1 varchar(200),
    @r1 varchar(50),
    @clave_especial varchar(4),
    @cod_imagen varchar(8)

AS
BEGIN

IF NOT EXISTS (SELECT C.CI, T.n_tarj FROM CLIENTE C, TARJETAS T WHERE C.CI=@ced AND T.CI=@ced AND T.n_tarj=@tarj_deb AND T.tipo_tarj="DEBITO")
    PRINT "ERROR: USTED NO ES CLIENTE DEL BLANCO O EL NUMERO DE TARJETA DE DEBITO QUE INGRESO NO ES CORRECTO."
ELSE
    BEGIN
        IF EXISTS (SELECT nick FROM USUARIO WHERE @nick=nick) PRINT "EL NOMBRE DE USUARIO YA EXISTE."
        ELSE
        BEGIN
            IF NOT EXISTS (SELECT @pass WHERE @pass LIKE '%[A-Z]%' AND @pass LIKE '%[0-9]%' AND @pass LIKE '%[a-z]%')
            PRINT "ERROR: SU CLAVE DEBE TENER LETRAS MAYUSCULAS, MINUSCULAS Y NUMEROS."
            ELSE
            BEGIN
            INSERT INTO USUARIO VALUES(@ced,@nick,@pass,@correo,@p1,@r1,@clave_especial,@cod_imagen,"DESCONECTADO",0)
            PRINT "REGISTRO EXITOSO."
            END
        END
    END

END

go

CREATE PROCEDURE validarPAGOTARJETA
@ced VARCHAR(10),
@cuenta VARCHAR(50),
@pago NUMERIC,
@n_tarjeta VARCHAR(50),
@referencia INT
AS
BEGIN
	DECLARE @fecha DATE,
            @saldo NUMERIC
IF EXISTS(SELECT A.n_cuenta, B.n_tarj, C.CI FROM CUENTA A, TARJETAS B, USUARIO C WHERE n_tarj=@n_tarjeta AND A.n_cuenta=@cuenta AND C.estado="CONECTADO")
IF (SELECT SUM(monto) FROM TRANS_CUENTAS WHERE @cuenta=n_cta)>@pago 

    IF(SELECT pago_total FROM TARJETAS WHERE n_tarj=@n_tarjeta)>=@pago
    BEGIN
    SELECT @fecha=getdate()
    SELECT @saldo=SUM(monto)-(@pago) FROM TRANS_CUENTAS
    UPDATE TARJETAS SET pago_total=pago_total-@pago where n_tarj=@n_tarjeta
    INSERT INTO TRANS_CUENTAS VALUES(@cuenta,@referencia,"PAGO DE TARJETA DE CREDITO",-(@pago),@saldo, @fecha)
    INSERT INTO TRANS_TARJETAS VALUES(@n_tarjeta,@referencia,"PAGO DE TARJETA DE CREDITO",-(@pago), @fecha)
    PRINT "PAGO EXITOSO"
    END 
    ELSE PRINT "EL MONTO QUE INGRESO ES MAYOR QUE SU PAGO TOTAL"
ELSE PRINT "LA CUENTA NO POSEE EL SALDO SUFICIENTE"
ELSE PRINT "LOS DATOS NO COINCIDEN O USUARIO DESCONECTADO"
END

go

CREATE PROCEDURE ins_TRANS_TARJETAS
    @n_tarj VARCHAR(50),
    @referencia INT,
    @descrip VARCHAR(100),
    @monto NUMERIC,
    @fecha DATE
    
AS
BEGIN

    DECLARE @monto_total NUMERIC,
            @n_cta_asoc VARCHAR(50),
            @monto_cuenta NUMERIC
        SELECT @monto_total=SUM(monto)+@monto FROM TRANS_TARJETAS WHERE n_tarj=@n_tarj
        SELECT @n_cta_asoc=n_cta_asoc FROM TARJETAS WHERE n_tarj=@n_tarj
        SELECT @monto_cuenta=SUM(monto)-(@monto) FROM TRANS_CUENTAS WHERE @n_cta_asoc=n_cta
    IF EXISTS (SELECT A.n_tarj, B.n_tarj FROM TARJETAS A, TRANS_TARJETAS B WHERE @n_tarj=A.n_tarj AND @n_tarj=B.n_tarj)
    BEGIN
        IF ( SELECT limite FROM TARJETAS WHERE @n_tarj=n_tarj AND tipo_tarj="CREDITO")>=@monto_total 
            BEGIN
            INSERT INTO TRANS_TARJETAS VALUES (@n_tarj,@referencia,@descrip,@monto,@fecha)
            UPDATE TARJETAS SET pago_total=@monto_total WHERE @n_tarj=n_tarj
            END
        ELSE
            BEGIN
            IF ( SELECT tipo_tarj FROM TARJETAS WHERE @n_tarj=n_tarj)="DEBITO"
            BEGIN
                INSERT INTO TRANS_TARJETAS VALUES (@n_tarj,@referencia,@descrip,@monto,@fecha)
                INSERT INTO TRANS_CUENTAS VALUES (@n_cta_asoc,@referencia,@descrip,-(@monto),@monto_cuenta,@fecha) 
            END
            ELSE (SELECT("EL VALOR NO PUEDE SOBREPASAR EL LIMITE DE LA TARJETA"))
            END
   END
    IF EXISTS (SELECT n_tarj FROM TARJETAS WHERE @n_tarj=n_tarj AND @n_tarj NOT IN (SELECT n_tarj FROM TRANS_TARJETAS WHERE @n_tarj=n_tarj))
    BEGIN
    INSERT INTO TRANS_TARJETAS VALUES(@n_tarj,@referencia,@descrip,@monto,@fecha)
    IF ( SELECT tipo_tarj FROM TARJETAS WHERE @n_tarj=n_tarj)="CREDITO"
    UPDATE TARJETAS SET pago_total=@monto WHERE @n_tarj=n_tarj
    ELSE
    INSERT INTO TRANS_CUENTAS VALUES (@n_cta_asoc,@referencia,@descrip,-(@monto),@monto_cuenta,@fecha) 
 
  END
END

go

CREATE PROCEDURE TRANSFERENCIA
@cod_imagen VARCHAR(10),
@ced_propio VARCHAR(10),
@cta_propia VARCHAR(50),
@nombre_terc VARCHAR(50),
@ced_tercero VARCHAR(10),
@cta_tercero VARCHAR(50),
@monto NUMERIC,
@coment VARCHAR(200),
@t_banco VARCHAR(15)
AS
BEGIN
    DECLARE @fecha DATE, 
            @saldo_propio NUMERIC, 
            @saldo_tercero NUMERIC,
            @referencia INT
            SELECT @fecha=GETDATE()
            SELECT @saldo_propio=SUM(monto)-(@monto) FROM TRANS_CUENTAS WHERE @cta_propia=n_cta
            SELECT @saldo_tercero=SUM(monto)+(@monto) FROM TRANS_CUENTAS WHERE @cta_tercero=n_cta
            IF EXISTS (SELECT referencia FROM TRANSFERENCIAS WHERE CI=@ced_propio)
            SELECT @referencia=SUM(referencia)+1 from TRANSFERENCIAS WHERE CI=@ced_propio
            ELSE (SELECT @referencia=1)

IF EXISTS ( SELECT CI FROM USUARIO WHERE @ced_propio=CI AND @cod_imagen=cod_imagen AND estado="CONECTADO")
BEGIN
    IF(@t_banco)="PROPIO"
    BEGIN
        IF (SELECT SUM(B.monto) FROM CUENTA A, TRANS_CUENTAS B WHERE @ced_propio=A.CI AND @cta_propia=A.n_cuenta AND @cta_propia=B.n_cta)>@monto
        BEGIN
            IF EXISTS (SELECT CI FROM CUENTA WHERE @ced_tercero=CI AND @cta_tercero=n_cuenta)
            BEGIN
                INSERT INTO TRANS_CUENTAS VALUES (@cta_propia,@referencia,"TRANSFERENCIA BANCO PROPIO",-(@monto),@saldo_propio,@fecha)
                INSERT INTO TRANS_CUENTAS VALUES (@cta_tercero,@referencia,"TRANSFERENCIA BANCO PROPIO",(@monto),@saldo_tercero,@fecha)
                INSERT INTO TRANSFERENCIAS VALUES (@fecha,@referencia,@ced_propio,@cta_propia,@nombre_terc,@ced_tercero,@cta_tercero,@monto,@coment,"PROPIO")
                PRINT "TRANSFERENCIA EXITOSA."
            END
            ELSE PRINT "LA CUENTA INGRESADA NO EXISTE."
        END
        ELSE PRINT "LOS DATOS SON INCORRECTOS O NO POSEE EL SALDO SUFICIENTE"
    END
    IF(@t_banco)="OTROS"
    BEGIN
    INSERT INTO TRANS_CUENTAS VALUES (@cta_propia,@referencia,"TRANSFERENCIA OTROS BANCOS",-(@monto),@saldo_propio,@fecha)
    INSERT INTO TRANSFERENCIAS VALUES (@fecha,@referencia,@ced_propio,@cta_propia,@nombre_terc,@ced_tercero,@cta_tercero,@monto,@coment,"OTROS")
    PRINT "TRANSFERENCIA EXITOSA"
    END
END
ELSE 
BEGIN
UPDATE USUARIO SET n_error=n_error+1 WHERE CI=@ced_propio
PRINT "ERROR: LA IMAGEN DE SEGURIDAD NO ES CORRECTA O EL USUARIO ESTA BLOQUEADO/DESCONECTADO."
END
END



go

CREATE PROCEDURE validarLOGOUT 
    @nick VARCHAR(15),
    @pass VARCHAR(8)
AS
BEGIN
    IF EXISTS (SELECT nick, pass FROM USUARIO WHERE nick=@nick AND pass=@pass AND estado="CONECTADO")
    BEGIN
    UPDATE USUARIO SET estado="DESCONECTADO" WHERE nick=@nick
    PRINT "USTED ESTA DESCONECTADO."
    END
END
